package swagger

import (
	"bytes"
	"encoding/json"
	"net/http"
	"time"

	"github.com/richardwilkes/toolbox/xio/fs/embedded"
)

type docsHandler struct {
	fs      embedded.FileSystem
	revised []byte
	when    time.Time
}

// NewDocsHandler provides a docs handler that overrides the host info in the
// index file statically generated by swaggerdoc. Typically created by doing
// something like:
//
// handler := swagger.NewDocsHandler(embedded.NewFileSystemFromEmbeddedZip("docs"), myActualHostName)
func NewDocsHandler(fs embedded.FileSystem, host string) http.Handler {
	dh := &docsHandler{fs: fs, when: time.Now()}
	if indexFile, exists := fs.ContentAsBytes("/api/index_tmpl.html"); exists {
		if jData, exists2 := fs.ContentAsBytes("/swagger.json"); exists2 {
			var spec map[string]interface{}
			if err := json.Unmarshal(jData, &spec); err == nil {
				spec["host"] = host
				if jData, err = json.Marshal(spec); err == nil {
					dh.revised = bytes.Replace(indexFile, []byte("SPEC"), jData, 1)
				}
			}
		}
	}
	return dh
}

func (dh *docsHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	if dh.revised != nil && (req.URL.Path == "/api/" || req.URL.Path == "/api/index.html") {
		http.ServeContent(w, req, req.URL.Path, dh.when, bytes.NewReader(dh.revised))
	} else {
		http.FileServer(dh.fs).ServeHTTP(w, req)
	}
}
